package com.certoclav.app.database;


import com.google.gson.annotations.SerializedName;
import com.j256.ormlite.field.DataType;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;

import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * A simple demonstration object we are creating and persisting to the database.
 */
@DatabaseTable(tableName = "protocolEntrys")
public class ProtocolEntry {

    public static final String FIELD_DEBUG_INPUT = "debugInput";
    public static final String FIELD_DEBUG_OUTPUT = "debugOutput";
    public static final String FIELD_ENTRY_UPLOADED = "entry_uploaded";

    // id is generated by the database and set on the object automatically
    @DatabaseField(generatedId = true, columnName = "protocolEntry_id")
    private int protocolEntry_id;

    @DatabaseField(columnName = "timestamp", dataType = DataType.DATE)
    private Date timestamp;

    @SerializedName("ts")
    private float ts;

    public float getTs() {
        return ts;
    }


    @DatabaseField(columnName = "temperature")
    @SerializedName("tmp")
    private float temperature;

    @DatabaseField(columnName = "media_temp")
    @SerializedName("mtmp")
    private float mediaTemperature;


    @DatabaseField(columnName = "media_temp_2")
    @SerializedName("mtmp_2")
    private float mediaTemperature2 = -100f;

    public float getMediaTemperature() {
        return mediaTemperature;
    }

    public void setMediaTemperature(float mediaTemperature) {
        this.mediaTemperature = mediaTemperature;
    }

    public float getMediaTemperature2() {
        return mediaTemperature2;
    }

    public void setMediaTemperature2(float mediaTemperature2) {
        this.mediaTemperature2 = mediaTemperature2;
    }

    @DatabaseField(columnName = "pressure")
    @SerializedName("prs")
    private float pressure;

    @DatabaseField(foreign = true, foreignAutoRefresh = true, columnName = "protocol_id")
    private Protocol protocol;

    @DatabaseField(columnName = FIELD_DEBUG_INPUT)
    private String debugInput;

    @DatabaseField(columnName = FIELD_DEBUG_OUTPUT)
    private String debugOutput;

    @DatabaseField(columnName = FIELD_ENTRY_UPLOADED)
    private boolean uploaded;


    private String timeStampWithMin;


    public int getProtocolEntry_id() {
        return protocolEntry_id;
    }

    public void setProtocolEntry_id(int protocolEntry_id) {
        this.protocolEntry_id = protocolEntry_id;
    }

    public Date getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Date timestamp) {
        this.timestamp = timestamp;
    }

    public float getTemperature() {
        return temperature;
    }

    public void setTemperature(float temperature) {
        this.temperature = temperature;
    }

    public float getPressure() {
        return pressure;
    }

    public float getPressureInkPa() {
        return pressure*100;
    }

    public void setPressure(float pressure) {
        this.pressure = pressure;
    }


    public Protocol getProtocol() {
        return protocol;
    }

    public void setProtocol(Protocol protocol) {
        this.protocol = protocol;
    }


    ProtocolEntry() {
        // needed by ormlite
    }

    public ProtocolEntry(Date timeStamp, float temperature, float mediaTemperature, float mediaTemperature2, float pressure, Protocol protocol, String debugInput, String debugOutput) {
        this.timestamp = timeStamp;
        this.temperature = temperature;
        this.mediaTemperature = mediaTemperature;
        this.mediaTemperature2 = mediaTemperature2;
        this.pressure = pressure;
        this.protocol = protocol;
        this.debugInput = debugInput;
        this.debugOutput = debugOutput;
    }


    @Override
    public String toString() {
        String test = "test";
        return test;

    }

    public String getDebugOutput() {
        return debugOutput;
    }

    public String getDebugInput() {
        return debugInput;
    }

    public String getFormatedTimeStampLong() {

        return new SimpleDateFormat("yyyy-MM-dd kk:mm:ss").format(timestamp);


    }


    public String getFormatedTimeStampShort() {

        return new SimpleDateFormat("kk:mm:ss").format(timestamp);

    }

    public String getTimeStampWithMin() {
        if (timeStampWithMin != null)
            return timeStampWithMin;
        return timeStampWithMin = Double.toString(roundFloat(
                (getTimestamp().getTime() -
                        getProtocol().getStartTime().getTime()) / 60000f
        ));

    }

    private Double roundFloat(float f) {
        int tempnumber = (int) (f * 100);
        Double roundedfloat = (double) ((double) tempnumber / 100.0);
        return roundedfloat;
    }

    public void setUploaded(boolean uploaded) {
        this.uploaded = uploaded;
    }

    public boolean isUploaded() {
        return uploaded;
    }
}




