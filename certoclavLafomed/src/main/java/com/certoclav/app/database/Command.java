package com.certoclav.app.database;

import com.certoclav.app.AppConstants;
import com.j256.ormlite.field.DatabaseField;

/**
 * A simple demonstration object we are creating and persisting to the database.
 */
public class Command {

	public Protocol getProtocol() {
		return protocol;
	}

	public void setProtocol(Protocol protocol) {
		this.protocol = protocol;
	}

	public void setProfile(Profile profile) {
		this.profile = profile;
	}

	public static final String FIELD_STEPNUMBER = "stepNumber";
	public static final String FIELD_COMMAND_ID = "command_id";
	public static final String FIELD_PROTOCOL = "protocol_id";
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true, columnName = FIELD_COMMAND_ID)
	private int command_id;
	
	@DatabaseField(foreign = true, foreignAutoRefresh = true, columnName = "profile_id") 
	private Profile profile;

	@DatabaseField(foreign = true, foreignAutoRefresh = true, columnName = FIELD_PROTOCOL) 
	private Protocol protocol;
	
	@DatabaseField(columnName = FIELD_STEPNUMBER)
	private int stepNumber;

	@DatabaseField(columnName = "mode")
	private String mode;

	@DatabaseField(columnName = "sensor")
	private String sensor;

	@DatabaseField(columnName = "value")
	private double value;
	
	@DatabaseField(columnName = "valve")
	private String valve;

	

    //mehrere command können ein profil angehören.
	//beim createn von datensätzen sollte man in folgender reihenfolge vorgehen:
	//1) Erstelle z.b zuerst ein profil profilDao.create(profil1);
	//2) dann erst die commandos erstellen; command.setProfil(profil1);
	//
	//wenn man ein query nach einem command macht, bekommt mein ein command-objekt mit 
	//einem profil-feld, bei dem nur der id-feld ausgefüllt ist. 
	//Der Rest ist mit false,0,null gefüllt. Entweder man schreibt dann 
	//profilDao.refresh(command.getProfile()); oder man setzt einfach von anfang an den 
	//Wert foreignAutoRefresh. Dann wird das immer automatisch getan.
	//
	//Beispiel: Anfrage nach allen commands, die einem bestimmten Profil angehören:
	//List<Command> results = commandDao.queryBuilder().where().eq("Profil_ID", profil1.getProfil_ID()).query();
	
	/**
	 * @Returns mode of the command as String
	 * mode can be: 
	 * 		{@link AppConstants.MODE_ACHIEVE}
	 * 		{@link AppConstants.MODE_MAINTAIN}
	 * 		{@link AppConstants.MODE_FINISH}
	 */
	public String getMode() {
		return mode;
	}

	public void setMode(String mode) {
		this.mode = mode;
	}

	public String getSensor() {
		return sensor;
	}

	public void setSensor(String sensor) {
		this.sensor = sensor;
	}

	/*
	 * 
	 * returns the value of the command.
	 * Time in Minutes
	 * Temperature in °C
	 */
	public double getValue() {
		return value;
	}

	public void setValue(double value) {
		this.value = value;
	}

	public String getValve() {
		return valve;
	}

	public void setValve(String valve) {
		this.valve = valve;
	}

	public void setCommand_id(int command_id) {
		this.command_id = command_id;
	}

	public void setStepNumber(int stepNumber) {
		this.stepNumber = stepNumber;
	}

	Command() {
		// needed by ormlite
	}

	public Command(int stepNumber, String mode, String sensor,double value, String valve, Profile profile, Protocol protocol) {
		this.stepNumber = stepNumber;
		this.mode = mode;
		this.sensor = sensor;
		this.value = value;
		this.valve = valve;
		this.profile = profile;
		this.protocol = protocol;
	}
	


	
	public int getCommand_id() {
		return command_id;
	}

	public int getStepNumber() {
		return stepNumber;
	}
	
	public Profile getProfile() {
		return profile;
	}


	
	
/**
 * Build String for microcontroller
 * for example: "PUT_PROF 3,ACHIEVE,TEMP_1,121,VLV_OPEN\n"
 * 
 */
	public String getCommandText() {
		StringBuilder sb = new StringBuilder();
		sb.append("PUT_PROF ").append(stepNumber);
		sb.append(",").append(mode);
		sb.append(",").append(sensor);
		sb.append(",").append(value);
		sb.append(",").append(valve);
		sb.append("\n");
		return sb.toString();
	}
	
	public void sendToMicrocontroller(){
		//sende this zu einer Task sentCommandTask
	
	}


}
