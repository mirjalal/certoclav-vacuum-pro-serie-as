package com.certoclav.app.database;


import android.content.SharedPreferences;
import android.os.Environment;
import android.preference.PreferenceManager;

import com.certoclav.app.AppConstants;
import com.certoclav.library.application.ApplicationController;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

/**
 * A simple demonstration object we are creating and persisting to the database.
 */
@DatabaseTable(tableName = "controllers")
public class Controller {

    // id is generated by the database and set on the object automatically

    public static final String ID_FIELD_NAME = "controller_id";

    @DatabaseField(generatedId = true, columnName = ID_FIELD_NAME)
    private int controller_id;

    @DatabaseField(columnName = "serialnumber")
    private String serialnumber;

    @DatabaseField(columnName = "savety_key")
    private String savetyKey;

    @DatabaseField(columnName = "cycle_number")
    private int cycleNumber;

    @DatabaseField(columnName = "bluetooth_address")
    private String bluetoothAddress;

    @DatabaseField(columnName = "alias_name")
    private String aliasName;

    @DatabaseField(columnName = "firmware_version")
    private String firmwareVersion;

    public String getFirmwareVersion() {
        return firmwareVersion;
    }

    public void setFirmwareVersion(String firmwareVersion) {
        this.firmwareVersion = firmwareVersion;
    }

    public String getAliasName() {
        return aliasName;
    }

    public void setAliasName(String aliasName) {
        this.aliasName = aliasName;
    }

    public Controller(String serialnumber, String aliasName, String savetyKey, String bluetoothAddress, int cycleNumber, String firmwareVersion) {
        this.serialnumber = serialnumber;
        this.aliasName = aliasName;
        this.savetyKey = savetyKey;
        this.bluetoothAddress = bluetoothAddress;
        this.cycleNumber = cycleNumber;
        this.firmwareVersion = firmwareVersion;
    }

    public int getCycleNumber() {
        return cycleNumber;
    }


    public void setCycleNumber(int cycleNumber) {
        this.cycleNumber = cycleNumber;
    }


    public String getSavetyKey() {

        if (AppConstants.isIoSimulated) {
            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ApplicationController.getContext());
            switch (prefs.getString(AppConstants.PREFERENCE_KEY_AUTOCLAVE_MODEL, "TLV-50")) {
                case "AHS-75-B":
                    return "FF000003957204831";
                case "TLV-50PD":
                    return "FF000003957204832";
                case "TLV-75FA":
                    return "FF000003957204833";
            }
            return AppConstants.SIMULATED_SAVETY_KEY;
        }

        //Find the directory for the SD Card using the API
        //*Don't* hardcode "/sdcard"
        File sdcard = Environment.getExternalStorageDirectory();

        //Get the text file
        File file = new File(sdcard, "key.txt");

        //Read text from file
        StringBuilder key = new StringBuilder();

        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String line;

            if ((line = br.readLine()) != null) {
                key.append(line);
            }
            br.close();
        } catch (IOException e) {
            return "";
        }


        return key.toString();
    }

//	public void setSavetyKey(String savetyKey) {
//		this.savetyKey = savetyKey;
//	}


    public String getBluetoothAddress() {
        return bluetoothAddress;
    }


    public void setBluetoothAddress(String bluetoothAddress) {
        this.bluetoothAddress = bluetoothAddress;
    }


    Controller() {
        // needed by ormlite
    }


    public String getSerialnumber() {

        if (AppConstants.isIoSimulated == true) {
            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ApplicationController.getContext());
            switch (prefs.getString(AppConstants.PREFERENCE_KEY_AUTOCLAVE_MODEL, "TLV-50")) {
                case "AHS-75-B":
                    return "40097";
                case "TLV-50PD":
                    return "40098";
                case "TLV-75FA":
                    return "40099";
            }
            return "40100";
        }
        //Find the directory for the SD Card using the API
        //*Don't* hardcode "/sdcard"
        File sdcard = Environment.getExternalStorageDirectory();

        //Get the text file
        File file = new File(sdcard, "key.txt");

        //Read text from file
        StringBuilder serial = new StringBuilder();

        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String line;

            if ((line = br.readLine()) != null) {
                if ((line = br.readLine()) != null)
                    serial.append(line);
            }
            br.close();
        } catch (IOException e) {
            return "";
        }


        return serial.toString();
    }

    public String getDeviceModel() {
        if (AppConstants.isIoSimulated == true) {
            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ApplicationController.getContext());
            return prefs.getString(AppConstants.PREFERENCE_KEY_AUTOCLAVE_MODEL, "TLV-50");
        }
        return AppConstants.MODEL;
    }


}



